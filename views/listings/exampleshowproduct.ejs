<% layout("/layouts/boilerplate") %>

<div class="container d-flex justify-content-center align-items-center min-vh-100">
  <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%; border-radius: 10px;">
    <h2 class="text-center mb-4">Login</h2>
    <form method="post" action="/login" class="needs-validation" novalidate>
      <!-- Username Field -->
      <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" name="username" id="username" class="form-control" required>
        <div class="valid-feedback">Looks great!</div>
        <div class="invalid-feedback">Please provide a username.</div>
      </div>


      <!-- Password Field -->
      <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" name="password" id="password" class="form-control" required>
        <div class="invalid-feedback">Password is required.</div>
      </div>

      <!-- Submit Button -->
      <button type="submit" class="btn btn-success w-100">Login</button>
    </form>


    <div class="text-center">
      <a href="/auth/google" class="btn btn-outline-primary w-100">
        <i class="fab fa-google"></i> Login with Google
      </a>
    </div>

    
    Don't have an account?<a href="/signup"> Register</a>


  </div>
</div>


<style>
    body {
        background-color: #f8f9fa; /* Light grey background for better contrast */
      }
      
      .card {
        border: none; /* Remove card border */
      }
      
      h2 {
        font-family: 'Poppins', sans-serif; /* Stylish font */
        font-weight: bold;
        color: #fe424d !important;
      }
      
      .btn-success {
        background-color: #fe424d; /* Customize button color */
        border: none;
        transition: background-color 0.3s ease;
      }
      
      .btn-success:hover {
        background-color: #e52f3bfd;
      }
      
</style>


































<body>
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
        <div class="card shadow-lg p-4" style="max-width: 500px; width: 100%; border-radius: 10px;">
            <h2 class="text-center mb-4">Sign Up</h2>
            <form method="post" action="/signup" class="needs-validation" novalidate enctype="multipart/form-data">
    
                <!-- Photo Field -->
                <div class="mb-3">
                    <label for="photo" class="form-label">Profile Photo</label>
                    <input type="file" name="photo" id="photo" class="form-control">
                </div>
    
                <!-- Name Field -->
                <div class="mb-3">
                    <label for="username" class="form-label">Name</label>
                    <input type="text" name="username" id="username" class="form-control" required>
                    <div class="invalid-feedback">Please provide your name.</div>
                </div>
    
                <!-- Email Field -->
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" name="email" id="email" class="form-control" required>
                    <div class="invalid-feedback">Please provide a valid email.</div>
                </div>
    
                <!-- Password Field -->
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" name="password" id="password" class="form-control" required>
                    <div class="invalid-feedback">Please provide a valid password.</div>
                </div>
    
                <!-- Phone Field -->
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone</label>
                    <input type="number" name="phone" id="phone" class="form-control" pattern="[0-9]{10}" required>
                    <div class="invalid-feedback">Please provide a valid 10-digit phone number.</div>
                </div>
    
                <!-- New Location Fields -->
                <!-- <div id="newLocationDiv" class="mb-3" style="display:none;"> -->
                    <label for="autocomplete" class="form-label">Search Location:</label>
                    <input type="text" id="autocomplete" name="locationSearch" placeholder="Enter a location" class="form-control mb-2" oninput="fetchLocationSuggestions()">
    
                    <ul id="locationSuggestions" class="list-group"></ul>
    
                    <div class="mt-3">
                        <label for="newCountry" class="form-label">Country:</label>
                        <input type="text" id="newCountry" name="newLocation[country]" class="form-control" readonly>
                    </div>
    
                    <div class="mt-3">
                        <label for="newState" class="form-label">State:</label>
                        <input type="text" id="newState" name="newLocation[state]" class="form-control" readonly>
                    </div>
    
                    <div class="mt-3">
                        <label for="newCity" class="form-label">City:</label>
                        <input type="text" id="newCity" name="newLocation[city]" class="form-control" readonly>
                    </div>
    
                    <div class="mt-3">
                        <label for="newArea" class="form-label">Area:</label>
                        <input type="text" id="newArea" name="newLocation[area]" class="form-control" readonly>
                    </div>
    
                    <div class="mt-3">
                        <label for="newZipCode" class="form-label">Zip Code:</label>
                        <input type="number" id="newZipCode" name="newLocation[zipCode]" class="form-control" readonly>
                    </div>
    
                    <!-- Hidden Fields for Latitude and Longitude -->
                    <input type="hidden" id="newLatitude" name="newLocation[latitude]">
                    <input type="hidden" id="newLongitude" name="newLocation[longitude]">
                </div>
    
                <!-- Submit Button -->
                <button type="submit" class="btn btn-success w-100">Sign Up</button>
            </form> <br> <br>
            Already have an account? <a href="/login"> Sign In</a>
    
        </div>
    </div>
    
    
    
    <script>
        // Your LocationIQ API key
        const key = 'pk.b74dc803d9f251195082b464c2311b5c';
        // Function to handle API errors
        function handleApiError(error) {
            console.error('API Error:', error);
            const suggestions = document.getElementById('locationSuggestions');
            suggestions.innerHTML = '<li class="error-message">Error fetching locations. Please try again.</li>';
        }
    
        // Debounce function to limit API calls
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    
        // Function to toggle location fields
        function toggleLocationFields() {
            const locationType = document.getElementById('locationType').value;
            document.getElementById('existingLocationDiv').style.display = 
                locationType === 'existing' ? 'block' : 'none';
            document.getElementById('newLocationDiv').style.display = 
                locationType === 'new' ? 'block' : 'none';
        }
    
        // Function to fetch location suggestions
        const fetchLocationSuggestions = debounce(function() {
            const input = document.getElementById('autocomplete').value;
            const suggestions = document.getElementById('locationSuggestions');
            
            if (input.length < 3) {
                suggestions.innerHTML = '';
                return;
            }
    
            suggestions.innerHTML = '<li class="loading-message">Searching...</li>';
    
            const encodedInput = encodeURIComponent(input);
            const url = `https://api.locationiq.com/v1/autocomplete.php?key=${key}&q=${encodedInput}&format=json&limit=5&addressdetails=1`;
    
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!Array.isArray(data)) {
                        throw new Error('Invalid response format');
                    }
    
                    if (data.length === 0) {
                        suggestions.innerHTML = '<li class="loading-message">No locations found</li>';
                        return;
                    }
    
                    let suggestionsHtml = '';
                    data.forEach(location => {
                        const escapedDisplayName = location.display_name
                            .replace(/'/g, "\\'")
                            .replace(/"/g, '\\"');
                        
                        suggestionsHtml += `
                            <li onclick="selectLocation('${escapedDisplayName}', '${location.lat}', '${location.lon}')">
                                ${location.display_name}
                            </li>`;
                    });
                    suggestions.innerHTML = suggestionsHtml;
                })
                .catch(handleApiError);
        }, 300);
    
       // Function to handle location selection
    function selectLocation(displayName, lat, lon) {
    document.getElementById('autocomplete').value = displayName;
    document.getElementById('locationSuggestions').innerHTML = '';
    
    // Fill latitude and longitude fields
    document.getElementById('newLatitude').value = lat;
    document.getElementById('newLongitude').value = lon;
    
    const url = `https://api.locationiq.com/v1/reverse.php?key=${key}&lat=${lat}&lon=${lon}&format=json`;
    
    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const area = data.address || {};
            
            document.getElementById('newCountry').value = area.country || '';
            document.getElementById('newState').value = area.state || area.province || '';
            document.getElementById('newCity').value = area.city || area.town || area.village || '';
            document.getElementById('newArea').value = [
                area.road,
                area.house_number,
                area.suburb
            ].filter(Boolean).join(', ');
            document.getElementById('newZipCode').value = area.postcode || '';
        })
        .catch(error => {
            console.error('Error in reverse geocoding:', error);
            alert('Error fetching location details. Please try again.');
        });
    }
    
    
        // Initialize the form
        document.addEventListener('DOMContentLoaded', function() {
            toggleLocationFields();
        });
    </script>
    
    
    
    <style>
        body {
            background-color: #f8f9fa;
            /* Light grey background for better contrast */
        }
    
        .card {
            border: none;
            /* Remove card border */
        }
    
        h2 {
            font-family: 'Poppins', sans-serif;
            /* Stylish font */
            font-weight: bold;
            color: #fe424d !important;
        }
    
        .btn-success {
            background-color: #fe424d;
            /* Customize button color */
            border: none;
            transition: background-color 0.3s ease;
        }
    
        .btn-success:hover {
            background-color: #e52f3bfd;
        }
    
        #locationSuggestions {
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            position: absolute;
            background: white;
            width: calc(100% - 2px);
            z-index: 1000;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            list-style-type: none;
            padding: 0;
        }
    
        #locationSuggestions li {
            padding: 8px 12px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }
    
        #locationSuggestions li:hover {
            background-color: #f5f5f5;
        }
    
        #newLocationDiv {
            position: relative;
        }
    
        .error-message {
            color: red;
            padding: 10px;
            margin: 5px 0;
        }
    
        .loading-message {
            color: #666;
            padding: 10px;
            margin: 5px 0;
        }
    </style>
    
    </body>